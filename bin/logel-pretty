#!/usr/bin/env node
import { Transform } from 'node:stream';
import split from 'split2';
import { parseDockerComposeLine } from '../lib/parser/docker-compose.js';
import { COLOR_STYLES, prettyPrintLine } from '../lib/pretty-print.js';

const parseLogelLine = (line) => {
	try {
		let json = JSON.parse(line);
		if (
			typeof json.$t !== 'number' ||
			typeof json.$l !== 'string' ||
			typeof json.$m !== 'string'
		) {
			return undefined;
		}
		return json;
	} catch (_) {
		return undefined;
	}
};

let logelParsers = [
	parseLogelLine,
	// parseLogelV03V04Line,
];

const dockerComposePreparser = (parser) => (line) => {
	let result = parser(line);
	if (result !== undefined) {
		return result;
	}
	let dcData = parseDockerComposeLine(line);
	if (dcData === undefined) {
		return undefined;
	}
	result = parser(dcData.line);
	if (result === undefined) {
		return undefined;
	}
	if (result.context === undefined) {
		result.context = { '$dockerCompose source': dcData.source };
	} else {
		result.context['$dockerCompose source'] = dcData.source;
	}
	return result;
};

let preparsers = [dockerComposePreparser];

let allParsers = [];

for (let parser of logelParsers) {
	allParsers.push(parser);
	for (let preparser of preparsers) {
		allParsers.push(preparser(parser));
	}
}

let usedParsers = [];
let lastParser = allParsers[0];

const prettyTransform = (chunk, enc, cb) => {
	let line = chunk.toString(enc);

	let p = lastParser(line);
	if (p === undefined) {
		for (lastParser of usedParsers) {
			p = lastParser(line);
			if (p !== undefined) {
				break;
			}
		}
		if (p === undefined) {
			for (lastParser of allParsers) {
				p = lastParser(line);
				if (p !== undefined) {
					usedParsers.push(lastParser);
					break;
				}
			}
		}
	}

	let output =
		p === undefined
			? `??? ${line}\n`
			: prettyPrintLine(p.$t, p.$l, p.$tag, p.$m, p.$d, COLOR_STYLES);
	cb(null, output);
};

process.stdin
	.pipe(split())
	.pipe(new Transform({ objectMode: true, transform: prettyTransform }))
	.pipe(process.stdout)
	.on('error', (err) => {
		throw err;
	});
