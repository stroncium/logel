#!/usr/bin/env node
const split = require('split2');
const { Transform } = require('stream');
const PrettyFormatter = require('../lib/output/formatter/pretty');
let chalk;

let formatter = new PrettyFormatter({params:{color:'auto'}});
if(formatter.color) {
  chalk = require('chalk');
}

const parseLogelLine = line => {
  let json = JSON.parse(line);
  if(typeof json.t !== 'number' || typeof json.l !== 'number' || typeof json.m !== 'string') throw new Error('incorrect json');
  return json;
};

const parseDockerComposeLogelLine = line => {
  let idx = line.indexOf('|');
  let jsonSrc = line.substr(idx+1);
  let source = line.substr(0, idx).trim();
  let json = parseLogelLine(jsonSrc);
  if (json.g === undefined) {
    json.g = source;
  } else {
    json.g = source + '.' + json.g;
  }
  return json;
};

let parseLine = parseLogelLine;

if(process.env.LOGEL_PRETTY_HACK !== undefined){
  for(let hack of process.env.LOGEL_PRETTY_HACK.split(',')){
    hack = hack.trim();
    switch(hack) {
      case 'docker-compose':
        parseLine = parseDockerComposeLogelLine;
        break;
      default:
        throw new Error(`unknown hack: ${hack}`);
    }
  }
}


const prettyTransform = (chunk, enc, cb) => {
  let line = chunk.toString(enc);

  let json;
  try {
    json = parseLine(line);
  } catch(err) {
    cb(null, line + '\n');
    return;
  }
  cb(null, formatter.format(json.t, json.l, json.g, json.m, json.c));
};

process.stdin
  .pipe(split())
  .pipe(new Transform({objectMode:true, transform:prettyTransform}))
  .pipe(process.stdout)
  .on('error', err => {throw err;})
